name: Deploy Resources

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action to perform: deploy or update. Deploy will create a new stack, while update will modify an existing stack.'
        required: true
        type: choice
        options:
          - deploy
          - update
      environment:
        description: 'Select environment to deploy: beta or prod.'
        required: true
        type: choice
        options:
          - beta
          - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Set Deployment Flag
        run: |
          echo "DEPLOY_RESOURCES=true" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.13.5'

      - name: Check if S3 bucket exists
        run: |
          BUCKET_NAME=${{ secrets.S3_BUCKET_LAMBDAS }}
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "Bucket exists."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Bucket does not exist. Creating bucket."
            if [ "${{ secrets.AWS_REGION }}" == "us-east-1" ]; then
              aws s3api create-bucket --bucket $BUCKET_NAME --region ${{ secrets.AWS_REGION }}
            else
              aws s3api create-bucket --bucket $BUCKET_NAME --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            fi
            echo "exists=false" >> $GITHUB_ENV
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Package Lambda functions
        run: |
          cd lambda
          zip -r transcribe.zip transcribe.py
          zip -r translate.zip translate.py
          zip -r synthesize.zip synthesize.py

      - name: Upload Lambda packages to S3
        run: |
          BUCKET_NAME=${{ secrets.S3_BUCKET_LAMBDAS }}
          APPNAME_AS_PREFIX="speakeasy/"
          for file in lambda/*.zip; do
            aws s3 cp "$file" s3://$BUCKET_NAME/$APPNAME_AS_PREFIX
          done
          echo "Uploaded all Lambda packages to s3://$BUCKET_NAME/$APPNAME_AS_PREFIX"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Check if CloudFormation stack exists
        run: |
          STACK_NAME="AcmeLabsSpeakEasy-${{ github.event.inputs.environment }}"
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV  # Export STACK_NAME as an environment variable
          if aws cloudformation describe-stacks --stack-name $STACK_NAME 2>/dev/null; then
            echo "Stack $STACK_NAME exists."
            echo "DEPLOY_STACK=true" >> $GITHUB_ENV
          else
            echo "Stack $STACK_NAME does not exist."
            echo "DEPLOY_STACK=false" >> $GITHUB_ENV
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy or Update CloudFormation
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
      
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            echo "Creating CloudFormation stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
              --capabilities CAPABILITY_NAMED_IAM \
              --tags Key=Name,Value="$STACK_NAME"
            
            # Wait for the stack creation to complete
            aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
          elif [ "${{ github.event.inputs.action }}" == "update" ]; then
            echo "Updating CloudFormation stack..."
            aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
              --capabilities CAPABILITY_NAMED_IAM \
              --tags Key=Name,Value="$STACK_NAME"
            
            # Wait for the stack update to complete
            aws cloudformation wait stack-update-complete --stack-name "$STACK_NAME"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          STACK_NAME: ${{ env.STACK_NAME }}

      - name: Add S3 Event Notification
        run: |
          # Determine the bucket name based on the selected environment
          if [ "${{ github.event.inputs.environment }}" == "beta" ]; then
            BUCKET_NAME=${{ secrets.S3_BUCKET_BETA }}
            FUNCTION_NAME="acmelabs-speakeasy-upload-beta"
          elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            BUCKET_NAME=${{ secrets.S3_BUCKET_PROD }}
            FUNCTION_NAME="acmelabs-speakeasy-upload-prod"
          else
            echo "Error: Invalid environment selected."
            exit 1
          fi
        
          # Set up the event notification for the S3 bucket
          aws s3api put-bucket-notification-configuration --bucket $BUCKET_NAME --notification-configuration '{
            "LambdaFunctionConfigurations": [
              {
                "Events": ["s3:ObjectCreated:*"],
                "LambdaFunctionArn": "'"$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.FunctionArn' --output text)"'",
                "Filter": {
                  "Key": {
                    "FilterRules": [
                      {
                        "Name": "prefix",
                        "Value": "audio_inputs/"
                      },
                      {
                        "Name": "suffix",
                        "Value": ".mp3"
                      }
                    ]
                  }
                }
              }
            ]
          }' || {
            echo "Failed to set up S3 event notification."
            exit 1
          }
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
